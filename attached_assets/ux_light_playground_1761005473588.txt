// ux_light_playground.tsx
// One-file demo: functional + aesthetic lighting with 2D (gradients) + 3D (physically lit scene).
// Stack: React 18, framer-motion, @react-three/fiber, @react-three/drei, three, Tailwind or plain CSS.
// Drop in src/ and render <UXLightPlayground/>. Keep deps aligned (React 18 to avoid R3F breaking on React 19).

import React, { Suspense, useMemo, useRef, useState, useEffect } from 'react';
import { motion, useMotionValue, useSpring, useTransform } from 'framer-motion';
import { Canvas, useFrame } from '@react-three/fiber';
import { Environment, OrbitControls } from '@react-three/drei';
import * as THREE from 'three';

// ---------- 2D LIGHT LAYER: gradient + spotlight reacting to cursor and app state ----------
function Light2DOverlay({ hue = 270 }: { hue?: number }) {
  const mx = useMotionValue(0);
  const my = useMotionValue(0);
  const sx = useSpring(mx, { stiffness: 120, damping: 18, mass: 0.4 });
  const sy = useSpring(my, { stiffness: 120, damping: 18, mass: 0.4 });

  useEffect(() => {
    const onMove = (e: MouseEvent) => { mx.set(e.clientX); my.set(e.clientY); };
    window.addEventListener('mousemove', onMove);
    return () => window.removeEventListener('mousemove', onMove);
  }, [mx, my]);

  const spotlight = useTransform([sx, sy], ([x, y]) => `radial-gradient(240px 180px at ${x}px ${y}px, hsl(${hue},100%,70%) 0%, transparent 60%)`);
  const bg = `linear-gradient(135deg, hsl(${hue}, 50%, 12%), hsl(${(hue+60)%360}, 55%, 10%))`;

  return (
    <div style={{ position: 'absolute', inset: 0, pointerEvents: 'none' }}>
      <motion.div
        style={{ position: 'absolute', inset: 0, background: bg, opacity: 0.9 }}
      />
      <motion.div
        style={{ position: 'absolute', inset: 0, backgroundImage: spotlight, mixBlendMode: 'screen', opacity: 0.85 }}
      />
      {/* functional focus ring when keyboard nav is active could also be layered here */}
    </div>
  );
}

// ---------- 3D LIGHT LAYER: physically-based lights modulated by the same interaction ----------
function LitObjects({ intensity = 1.2, color = new THREE.Color('#8b5cf6') }) {
  const keyLight = useRef<THREE.DirectionalLight>(null);
  const fillLight = useRef<THREE.PointLight>(null);
  const rimLight = useRef<THREE.DirectionalLight>(null);

  // Animate lights with subtle UX-friendly motion
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    if (keyLight.current) {
      keyLight.current.intensity = intensity * (1.0 + 0.05 * Math.sin(t * 0.8));
      keyLight.current.position.x = Math.sin(t * 0.3) * 2.2;
      keyLight.current.color = color;
    }
    if (fillLight.current) {
      fillLight.current.intensity = intensity * 0.6 * (1.0 + 0.08 * Math.cos(t * 0.6));
    }
    if (rimLight.current) {
      rimLight.current.intensity = intensity * 0.9;
    }
  });

  return (
    <>
      <ambientLight intensity={0.2} />
      <directionalLight ref={keyLight} position={[2, 2, 2]} intensity={intensity} castShadow />
      <pointLight ref={fillLight} position={[-2, 1.2, 1.6]} intensity={intensity * 0.6} color={'#22d3ee'} />
      <directionalLight ref={rimLight} position={[0, 2, -3]} intensity={intensity * 0.9} color={'#ec4899'} />
    </>
  );
}

function ReflectiveStage() {
  const mat = useMemo(() => new THREE.MeshPhysicalMaterial({
    metalness: 0.7, roughness: 0.2, clearcoat: 0.5, clearcoatRoughness: 0.1, color: '#cbd5e1'
  }), []);
  const groundMat = useMemo(() => new THREE.MeshStandardMaterial({ color: '#0b0f14', roughness: 0.6, metalness: 0.1 }), []);

  return (
    <group>
      <mesh castShadow receiveShadow material={mat} position={[0, 0.8, 0]}>
        <icosahedronGeometry args={[0.8, 1]} />
      </mesh>
      <mesh rotation-x={-Math.PI/2} position={[0, 0, 0]} receiveShadow material={groundMat}>
        <circleGeometry args={[6, 64]} />
      </mesh>
    </group>
  );
}

// ---------- BRIDGE: link pointer position to both 2D hue + 3D light color ----------
function useInteractiveHue() {
  const [hue, setHue] = useState(270);
  useEffect(() => {
    const onMove = (e: MouseEvent) => {
      const nx = e.clientX / window.innerWidth;
      const ny = e.clientY / window.innerHeight;
      // map to hue, bias toward UX-friendly violet/cyan range
      const h = Math.round(200 + nx * 120 - ny * 40);
      setHue((h + 360) % 360);
    };
    window.addEventListener('mousemove', onMove);
    return () => window.removeEventListener('mousemove', onMove);
  }, []);
  return hue;
}

export default function UXLightPlayground() {
  const hue = useInteractiveHue();
  const threeColor = useMemo(() => new THREE.Color(`hsl(${hue}, 90%, 65%)`), [hue]);

  // Functional knob: reduce intensity when prefers-reduced-motion is on or when tab is hidden
  const [intensity, setIntensity] = useState(1.2);
  useEffect(() => {
    const media = window.matchMedia('(prefers-reduced-motion: reduce)');
    const onVis = () => setIntensity(document.hidden ? 0.6 : (media.matches ? 0.8 : 1.2));
    media.addEventListener('change', onVis);
    document.addEventListener('visibilitychange', onVis);
    onVis();
    return () => { media.removeEventListener('change', onVis); document.removeEventListener('visibilitychange', onVis); };
  }, []);

  return (
    <div style={{ position: 'relative', minHeight: '100vh', background: '#06080c', color: 'white' }}>
      {/* 3D */}
      <Canvas
        shadows
        camera={{ position: [2.1, 1.6, 2.1], fov: 55 }}
        style={{ height: '70vh', borderRadius: 24 }}
      >
        <color attach="background" args={['#05070a']} />
        <Suspense fallback={null}>
          <Environment preset="city" />
          <LitObjects intensity={intensity} color={threeColor} />
          <ReflectiveStage />
          <OrbitControls enableDamping dampingFactor={0.08} />
        </Suspense>
      </Canvas>

      {/* 2D overlay */}
      <Light2DOverlay hue={hue} />

      {/* Minimal controls (functional UX) */}
      <div style={{ position: 'absolute', bottom: 24, left: 24, right: 24, display: 'flex', gap: 12, alignItems: 'center' }}>
        <motion.input
          type="range"
          min={0.5}
          max={1.6}
          step={0.05}
          value={intensity}
          onChange={(e) => setIntensity(parseFloat(e.target.value))}
          style={{ width: 240 }}
          whileFocus={{ scale: 1.02 }}
        />
        <div style={{ opacity: 0.8, fontSize: 12 }}>Intensity: {intensity.toFixed(2)} | Hue: {hue}</div>
      </div>
    </div>
  );
}

// Notes:
// - 2D layer gives immediate perceptual feedback. 3D lights add depth and affordance.
// - Both layers share pointer-driven hue for cohesive UX.
// - Intensity auto-dials down when tab is hidden or reduced-motion is requested.
// - Keep assets local; no external textures required. Replace Environment preset as needed.
